Nuts and Bolts of WebSocket
===========================

## Introduction to WebSocket

* WebSocket introduction slides
* Chrome Developer Tools, Console
+
[source,text]
----
ws = new WebSocket("ws://echo.websocket.org");
ws.send("hello world");
----
+
* In Network tab, show WebSocket frames
* Define message handlers
+
[source, text]
----
ws.onmessage = function(evt) { console.log(evt) }
----
+
or
+
[source, text]
----
ws.onmessage = function(evt) { alert(evt.data) }
----
+
* Copy/paste fragment from websocket.org/echo.html
** Show Firefox Developer Tools
* Use http://caniuse.com/websockets to check WebSocket compatibility
* Talk points
** WebSocket server is required, just like HTTP
** Do you want to write your own WebSocket server or use that is already battle-tested ? For example, 200-line HTTP server is useful to begin with but production nginx or HTTPD are used in production

## Node.js

### Get started with OpenShift

. Create a new account https://www.openshift.com/app/account/new
. Install rhc client from https://developers.openshift.com/en/getting-started-client-tools.html

### Create your first NodeJS application on OpenShift

. Install NodeJS
. Create a NodeJS application on OpenShift
. `git clone <workspace>`
. `npm install` (will install the modules locally)
. `git add --all`
. `git commit`
. `git push`

### Echo server

. Copy the file from https://github.com/javaee-samples/javaee7-websocket/blob/master/src/index.js
. `git add index.js`
. `npm install --save ws`
. `git add --all`
. `git commit`
. `git push`

#### Test the echo server

. Use http://www.websocket.org/echo.html
. Connect to ws://<appname>-<domain>.rhccloud.com:8000
. Send some messages and see the response

### WebSocket in OpenShift

image::images/openshift-websocket-routing.png[]

## JSR 356

### Introduction

Show the slides

### Chat Server

https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/chat

#### Deploy to OpenShift

. In cloned repo `git rm -rf src pom.xml`
. `cp <chat dir>/target/chat.war deployments/ROOT.war`
. `git add deployments/ROOT.war`
. `git commit . -m"adding war"`
. `git push`

### Collaborative Whiteboard

https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/whiteboard

#### Deploy locally to WildFly

. Download WildFly 8.1 http://download.jboss.org/wildfly/8.1.0.Final/wildfly-8.1.0.Final.zip
. Unzip and start as `bin/standalone.sh`
. Deploy the sample as `mvn wildfly:deploy` from whiteboard directory

### URI templating matching - message routing

### Client API

https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/google-docs

### Programmatic endpoint

https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/endpoint-singleton

## WebSocket Security

* Securing WebSockets
** Cannot make ws:// from https:// page

## WebSocket using Undertow/WildFly

https://github.com/undertow-io/undertow/blob/master/examples/src/main/java/io/undertow/examples/chat/ChatServer.java

## Comparing with REST

https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/websocket-vs-rest-payload
https://github.com/javaee-samples/javaee7-samples/tree/master/websocket/websocket-vs-rest

## Contrast with SSE

Use slides

## Kaazing Gateway

https://github.com/arun-gupta/kaazing-openshift-cartridge

## Pub/Sub over WebSocket
### JMS - Need further discussion
### Showcase http://demo.kaazing.com/demo/jms/javascript/jms-javascript.html
### Showcase http://demo.kaazing.com/demo/jms/javascript/?d=stomp-stock with ActiveMQ on OpenShift
### MQTT, STOMP over WebSocket - Read details on http://www.amazon.com/The-Definitive-Guide-HTML5-WebSocket/dp/1430247401

## WebSocket using Atmosphere

??

## Surviving Firewall and Proxy
include::firewall.asciidoc[]

## WebSocket Debugging
include::debugging.asciidoc[]

## WebSocket Production Tips
include::production.asciidoc[]

## Client technologies (supporting other languages - Java APIs or .NET APIs)

### Kaazing Client API

## Native App (Objective C and Java Android)

??

## Embedded and IoT

. Peter to bring the two devices

## Cool demos

. http://twglobe-shifter.rhcloud.com/ using pubnub, pusher.io and twitter streaming API
. http://gist-reveal.it

